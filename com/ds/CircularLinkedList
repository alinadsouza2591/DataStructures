package com.ds;

public class CircularLinkedList
{
    static class Node {
        int data;
        Node next;
    }
    
    //function to add data at the beginning of the linkedlist
    static Node push(Node headRef, int data) {
        
        Node newNode = new Node();
        Node temp = headRef;
        newNode.data = data;
        newNode.next = headRef;
        
        if(headRef != null){
            while(temp.next != headRef)
                temp = temp.next;
            temp.next = newNode;
        } else {
            newNode.next = newNode;
        }
        
        headRef = newNode;
        
        return headRef;
        
    }
    
    //print the circular linkedlist
    static void printList(Node head) {
        
        Node temp = head;
        
        if(head !=null){
            do{
                System.out.println(temp.data + " ");
                temp = temp.next;
            } while(temp != head);
        }        
    }
    
    //function to delete the Node
    static Node deleteNode(Node head, int key) {
        
        //if no data is avialable
        if(head == null)
            return null;
            
        Node curr = head;
        Node prev = new Node();
        
        while(curr.data != key){
            if(curr.next == head) {
                System.out.println("Given Node is not found in the list!!!");
                break;
            }
            
            prev = curr;
            curr = curr.next;
        }
        
        //check if there is only Node
        if(curr == head && curr.next==head){
            head = null;
            return head;
        }
        
        //If more than one Nod
        //check if it is first Node
        if(curr == head){
            prev = head;
            while(prev.next!=head)
                prev = prev.next;
            head = curr.next;
            prev.next = head;
        } 
        
        //check if it is last Node
        if(curr.next == head){
            prev.next = head;
        } else {
            prev.next = curr.next;
        }
        return head;
    }
    
    //check if the linkedlist id circular
    static boolean isCircular(Node head){
        //an empty linkedlist is circular
        if(head==null)
            return true;
        
        //next of head
        Node node = head.next;
        
        //This loop would stop in both cases 
        //(i) id circular
        //(ii) not circular
        while(node != null && node != head) {
            node = node.next;
        }
        
        return node==head;
        
    }
    
	public static void main(String[] args) {
	    
	    Node head = null;
	    
	    head = push(head,12);
	    head = push(head,56);
	    head = push(head,2);
	    head = push(head,11);
	    
	    System.out.println("circular linkedlist");
		printList(head);

		System.out.println("======================");
		head = deleteNode(head,12);

		printList(head);
		System.out.println("======================");
		System.out.println(isCircular(head));
	}
}
