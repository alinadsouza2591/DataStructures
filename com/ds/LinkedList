public class LinkedList
{
    Node head;
    
    //Node which preserves data and next reference value
    static class Node {
        int data;
        Node next;
        
        Node(int data){
            this.data = data;
            next = null;
        }
    }
    
    //print function to print the value
    public void printList(){
        Node n = head;
        while(n!=null){
            System.out.println(n.data);
            n = n.next;
        }
        
    }
    
    //push the value at the first location
    public void push(int newData) {
        Node newNode = new Node(newData);
        newNode.next = head;
        head = newNode;
    }
    
    //insert data at given location
    public void insertAfter(Node prevNode, int newData) {
        if(prevNode==null){
            System.out.println("the prev node cannot be null");
            return;
        }
        
        Node newNode = new Node(newData);
        newNode.next = prevNode.next;
        prevNode.next = newNode;
    }
    
    //append data at the last 
    public void append(int newData) {
        
        if(head == null){
            head = new Node(newData);
            return;
        }
        
        Node newNode = new Node(newData);
        
        newNode.next = null;
        
        Node last = head;
        while(last.next !=null){
            last = last.next;
        }
        last.next = newNode;
    }
    
    //delete the key
    public void deleteKey(int key) {
        Node temp = head;
        Node prev = null;
        
        //remove first element in the list
        if(temp !=null && temp.data == key){
            head = temp.next;
            return;
        }
        
        //if the element is not at the first
        while(temp !=null && temp.data!=key) {
            prev = temp;
            temp = temp.next;
        }
        
        //if the key is not present 
        if(temp==null)
            return;
            
        
        prev.next = temp.next;
    }
    
	public static void main(String[] args) {
		Main list = new Main();
		
		list.head = new Node(1);
		Node second = new Node(2);
		Node third = new Node(3);
		
		list.head.next = second;
		second.next = third;
		list.push(5);
		list.insertAfter(list.head.next,7);
		list.append(100);
		list.deleteKey(100);
		list.printList();
	}
}
